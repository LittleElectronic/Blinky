
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a1c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001bd8  08001bd8  00011bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c18  08001c18  00011c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c1c  08001c1c  00011c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  2000000c  08001c2c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  08001c2c  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005ac0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ff7  00000000  00000000  00025afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005b8  00000000  00000000  00026af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  000270b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000024dd  00000000  00000000  000275d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002058  00000000  00000000  00029aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002bb05  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000150c  00000000  00000000  0002bb84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001bc0 	.word	0x08001bc0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001bc0 	.word	0x08001bc0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f98c 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f82e 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f87e 	bl	8000308 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (MODE_SELECTION == 0) {
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <main+0x60>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d107      	bne.n	8000224 <main+0x28>
	  /* Toggle LEDs - Use the HAL functions from stm32l4xx_hal_gpio.c file */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //LD1 (green) – PC7
 8000214:	2180      	movs	r1, #128	; 0x80
 8000216:	4812      	ldr	r0, [pc, #72]	; (8000260 <main+0x64>)
 8000218:	f000 fce8 	bl	8000bec <HAL_GPIO_TogglePin>
	  HAL_Delay(100); //100ms
 800021c:	2064      	movs	r0, #100	; 0x64
 800021e:	f000 f9f1 	bl	8000604 <HAL_Delay>
 8000222:	e7f3      	b.n	800020c <main+0x10>
	  } else if (MODE_SELECTION == 1) {
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <main+0x60>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d108      	bne.n	800023e <main+0x42>
	  /* Turn OFF the LEDs - Use the HAL functions from stm32l4xx_hal_gpio.c file
	  */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Turn off LD1 (green)
 800022c:	2200      	movs	r2, #0
 800022e:	2180      	movs	r1, #128	; 0x80
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <main+0x64>)
 8000232:	f000 fcc3 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_Delay(100); //100ms
 8000236:	2064      	movs	r0, #100	; 0x64
 8000238:	f000 f9e4 	bl	8000604 <HAL_Delay>
 800023c:	e7e6      	b.n	800020c <main+0x10>
	  } else if (MODE_SELECTION == 2) {
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <main+0x60>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b02      	cmp	r3, #2
 8000244:	d1e2      	bne.n	800020c <main+0x10>
	  /* Turn ON the LED - Use the HAL functions from stm32l4xx_hal_gpio.c file */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);//LD1 (green) – PC7
 8000246:	2201      	movs	r2, #1
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <main+0x64>)
 800024c:	f000 fcb6 	bl	8000bbc <HAL_GPIO_WritePin>
	  HAL_Delay(1000);//1secs
 8000250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000254:	f000 f9d6 	bl	8000604 <HAL_Delay>
	  if (MODE_SELECTION == 0) {
 8000258:	e7d8      	b.n	800020c <main+0x10>
 800025a:	bf00      	nop
 800025c:	20000028 	.word	0x20000028
 8000260:	48000800 	.word	0x48000800

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b096      	sub	sp, #88	; 0x58
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2244      	movs	r2, #68	; 0x44
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fc9c 	bl	8001bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000286:	2000      	movs	r0, #0
 8000288:	f000 fd02 	bl	8000c90 <HAL_PWREx_ControlVoltageScaling>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000292:	f000 f8b7 	bl	8000404 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000296:	2310      	movs	r3, #16
 8000298:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a2:	2360      	movs	r3, #96	; 0x60
 80002a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002aa:	2301      	movs	r3, #1
 80002ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80002b2:	233c      	movs	r3, #60	; 0x3c
 80002b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b6:	2302      	movs	r3, #2
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002be:	2302      	movs	r3, #2
 80002c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fd86 	bl	8000dd8 <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002d2:	f000 f897 	bl	8000404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2303      	movs	r3, #3
 80002dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002ea:	463b      	mov	r3, r7
 80002ec:	2105      	movs	r1, #5
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 f998 	bl	8001624 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002fa:	f000 f883 	bl	8000404 <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3758      	adds	r7, #88	; 0x58
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <MX_GPIO_Init+0xa0>)
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <MX_GPIO_Init+0xa0>)
 8000322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000324:	f043 0304 	orr.w	r3, r3, #4
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_GPIO_Init+0xa0>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0304 	and.w	r3, r3, #4
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <MX_GPIO_Init+0xa0>)
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_GPIO_Init+0xa0>)
 800033a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_GPIO_Init+0xa0>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	4816      	ldr	r0, [pc, #88]	; (80003ac <MX_GPIO_Init+0xa4>)
 8000354:	f000 fc32 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800035c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_GPIO_Init+0xa8>)
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	4619      	mov	r1, r3
 800036c:	480f      	ldr	r0, [pc, #60]	; (80003ac <MX_GPIO_Init+0xa4>)
 800036e:	f000 fa7b 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037e:	2302      	movs	r3, #2
 8000380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	4619      	mov	r1, r3
 8000388:	4808      	ldr	r0, [pc, #32]	; (80003ac <MX_GPIO_Init+0xa4>)
 800038a:	f000 fa6d 	bl	8000868 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2101      	movs	r1, #1
 8000392:	2028      	movs	r0, #40	; 0x28
 8000394:	f000 fa31 	bl	80007fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000398:	2028      	movs	r0, #40	; 0x28
 800039a:	f000 fa4a 	bl	8000832 <HAL_NVIC_EnableIRQ>

}
 800039e:	bf00      	nop
 80003a0:	3720      	adds	r7, #32
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000
 80003ac:	48000800 	.word	0x48000800
 80003b0:	10110000 	.word	0x10110000

080003b4 <HAL_GPIO_EXTI_Callback>:
* @brief EXTI line detection callback. The function will be call by EXTI15_10_IRQHandler in “stm32l4xx_it.c” .
* @param GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c4:	d115      	bne.n	80003f2 <HAL_GPIO_EXTI_Callback+0x3e>
{
			MODE_SELECTION++;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <HAL_GPIO_EXTI_Callback+0x48>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	3301      	adds	r3, #1
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <HAL_GPIO_EXTI_Callback+0x48>)
 80003d0:	701a      	strb	r2, [r3, #0]
			if(MODE_SELECTION > 2) MODE_SELECTION=0;
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <HAL_GPIO_EXTI_Callback+0x48>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	d902      	bls.n	80003e0 <HAL_GPIO_EXTI_Callback+0x2c>
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <HAL_GPIO_EXTI_Callback+0x48>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
			/* Debounce - wait until the button is released . Read the GPIO to get the state. Refer to the schematics. */
			/* - Use the HAL functions from stm32l4xx_hal_gpio.c file */
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET);//Blue pushbutton – PC13
 80003e0:	bf00      	nop
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	4806      	ldr	r0, [pc, #24]	; (8000400 <HAL_GPIO_EXTI_Callback+0x4c>)
 80003e8:	f000 fbd0 	bl	8000b8c <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1f7      	bne.n	80003e2 <HAL_GPIO_EXTI_Callback+0x2e>
}
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000028 	.word	0x20000028
 8000400:	48000800 	.word	0x48000800

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040a:	e7fe      	b.n	800040a <Error_Handler+0x6>

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <HAL_MspInit+0x44>)
 8000414:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <HAL_MspInit+0x44>)
 8000416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6613      	str	r3, [r2, #96]	; 0x60
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x44>)
 8000420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4a09      	ldr	r2, [pc, #36]	; (8000450 <HAL_MspInit+0x44>)
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_MspInit+0x44>)
 800042e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	6593      	str	r3, [r2, #88]	; 0x58
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <HAL_MspInit+0x44>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <MemManage_Handler+0x4>

08000466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <UsageFault_Handler+0x4>

08000472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 f890 	bl	80005c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC13_Pin);
 80004ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004b0:	f000 fbb6 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004bc:	4a15      	ldr	r2, [pc, #84]	; (8000514 <SystemInit+0x5c>)
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <SystemInit+0x5c>)
 80004c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004cc:	4a12      	ldr	r2, [pc, #72]	; (8000518 <SystemInit+0x60>)
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <SystemInit+0x60>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <SystemInit+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <SystemInit+0x60>)
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <SystemInit+0x60>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <SystemInit+0x60>)
 80004f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <SystemInit+0x60>)
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <SystemInit+0x60>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000500:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <SystemInit+0x60>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000ed00 	.word	0xe000ed00
 8000518:	40021000 	.word	0x40021000

0800051c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000526:	2003      	movs	r0, #3
 8000528:	f000 f95c 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800052c:	200f      	movs	r0, #15
 800052e:	f000 f80d 	bl	800054c <HAL_InitTick>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d002      	beq.n	800053e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000538:	2301      	movs	r3, #1
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	e001      	b.n	8000542 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800053e:	f7ff ff65 	bl	800040c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000542:	79fb      	ldrb	r3, [r7, #7]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <HAL_InitTick+0x6c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d023      	beq.n	80005a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <HAL_InitTick+0x70>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <HAL_InitTick+0x6c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f969 	bl	800084e <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d10f      	bne.n	80005a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d809      	bhi.n	800059c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f933 	bl	80007fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_InitTick+0x74>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	e007      	b.n	80005ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e004      	b.n	80005ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	e001      	b.n	80005ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000004 	.word	0x20000004

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000008 	.word	0x20000008
 80005e8:	2000002c 	.word	0x2000002c

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	2000002c 	.word	0x2000002c

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3f7      	bcc.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000008 	.word	0x20000008

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	4909      	ldr	r1, [pc, #36]	; (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	095b      	lsrs	r3, r3, #5
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	f002 021f 	and.w	r2, r2, #31
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	490d      	ldr	r1, [pc, #52]	; (8000734 <__NVIC_SetPriority+0x4c>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	4909      	ldr	r1, [pc, #36]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	3b04      	subs	r3, #4
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	2201      	movs	r2, #1
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	401a      	ands	r2, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000782:	2101      	movs	r1, #1
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	1e59      	subs	r1, r3, #1
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	4313      	orrs	r3, r2
         );
}
 8000792:	4618      	mov	r0, r3
 8000794:	3724      	adds	r7, #36	; 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f7ff ff90 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff2b 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff40 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff33 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa2 	bl	80007a0 <SysTick_Config>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000876:	e166      	b.n	8000b46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	f000 8158 	beq.w	8000b40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d00b      	beq.n	80008b0 <HAL_GPIO_Init+0x48>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d007      	beq.n	80008b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a4:	2b11      	cmp	r3, #17
 80008a6:	d003      	beq.n	80008b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d130      	bne.n	8000912 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2203      	movs	r2, #3
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68da      	ldr	r2, [r3, #12]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e6:	2201      	movs	r2, #1
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	f003 0201 	and.w	r2, r3, #1
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d003      	beq.n	8000952 <HAL_GPIO_Init+0xea>
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b12      	cmp	r3, #18
 8000950:	d123      	bne.n	800099a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	08da      	lsrs	r2, r3, #3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3208      	adds	r2, #8
 800095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	220f      	movs	r2, #15
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f003 0307 	and.w	r3, r3, #7
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	08da      	lsrs	r2, r3, #3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3208      	adds	r2, #8
 8000994:	6939      	ldr	r1, [r7, #16]
 8000996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 0203 	and.w	r2, r3, #3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b2 	beq.w	8000b40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	4a61      	ldr	r2, [pc, #388]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009de:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6613      	str	r3, [r2, #96]	; 0x60
 80009e8:	4b5e      	ldr	r3, [pc, #376]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f4:	4a5c      	ldr	r2, [pc, #368]	; (8000b68 <HAL_GPIO_Init+0x300>)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a1e:	d02b      	beq.n	8000a78 <HAL_GPIO_Init+0x210>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a52      	ldr	r2, [pc, #328]	; (8000b6c <HAL_GPIO_Init+0x304>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d025      	beq.n	8000a74 <HAL_GPIO_Init+0x20c>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a51      	ldr	r2, [pc, #324]	; (8000b70 <HAL_GPIO_Init+0x308>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d01f      	beq.n	8000a70 <HAL_GPIO_Init+0x208>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a50      	ldr	r2, [pc, #320]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d019      	beq.n	8000a6c <HAL_GPIO_Init+0x204>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a4f      	ldr	r2, [pc, #316]	; (8000b78 <HAL_GPIO_Init+0x310>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d013      	beq.n	8000a68 <HAL_GPIO_Init+0x200>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4e      	ldr	r2, [pc, #312]	; (8000b7c <HAL_GPIO_Init+0x314>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1fc>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a4d      	ldr	r2, [pc, #308]	; (8000b80 <HAL_GPIO_Init+0x318>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1f8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <HAL_GPIO_Init+0x31c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1f4>
 8000a58:	2307      	movs	r3, #7
 8000a5a:	e00e      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	e00c      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a60:	2306      	movs	r3, #6
 8000a62:	e00a      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a64:	2305      	movs	r3, #5
 8000a66:	e008      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e004      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	f002 0203 	and.w	r2, r2, #3
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	4093      	lsls	r3, r2
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a8a:	4937      	ldr	r1, [pc, #220]	; (8000b68 <HAL_GPIO_Init+0x300>)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000abc:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ae6:	4a28      	ldr	r2, [pc, #160]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f47f ae91 	bne.w	8000878 <HAL_GPIO_Init+0x10>
  }
}
 8000b56:	bf00      	nop
 8000b58:	371c      	adds	r7, #28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	48000800 	.word	0x48000800
 8000b74:	48000c00 	.word	0x48000c00
 8000b78:	48001000 	.word	0x48001000
 8000b7c:	48001400 	.word	0x48001400
 8000b80:	48001800 	.word	0x48001800
 8000b84:	48001c00 	.word	0x48001c00
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43d9      	mvns	r1, r3
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	619a      	str	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fbb8 	bl	80003b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c60:	d102      	bne.n	8000c68 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	e00b      	b.n	8000c80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c76:	d102      	bne.n	8000c7e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c7c:	e000      	b.n	8000c80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000c7e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40007000 	.word	0x40007000

08000c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d141      	bne.n	8000d22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000caa:	d131      	bne.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cac:	4a47      	ldr	r2, [pc, #284]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	4a43      	ldr	r2, [pc, #268]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cbe:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000ccc:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2232      	movs	r2, #50	; 0x32
 8000cd2:	fb02 f303 	mul.w	r3, r2, r3
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	0c9b      	lsrs	r3, r3, #18
 8000cde:	3301      	adds	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce2:	e002      	b.n	8000cea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf6:	d102      	bne.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f2      	bne.n	8000ce4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0a:	d158      	bne.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e057      	b.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d10:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d20:	e04d      	b.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d28:	d141      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d36:	d131      	bne.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d38:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2232      	movs	r2, #50	; 0x32
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d6e:	e002      	b.n	8000d76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d82:	d102      	bne.n	8000d8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f2      	bne.n	8000d70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d96:	d112      	bne.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e011      	b.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000dac:	e007      	b.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dae:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dbc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	431bde83 	.word	0x431bde83

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	f000 bc16 	b.w	8001618 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dec:	4ba0      	ldr	r3, [pc, #640]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df6:	4b9e      	ldr	r3, [pc, #632]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80e4 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <HAL_RCC_OscConfig+0x4c>
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	2b0c      	cmp	r3, #12
 8000e18:	f040 808b 	bne.w	8000f32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f040 8087 	bne.w	8000f32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e24:	4b92      	ldr	r3, [pc, #584]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_OscConfig+0x64>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e3ed      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1a      	ldr	r2, [r3, #32]
 8000e40:	4b8b      	ldr	r3, [pc, #556]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d004      	beq.n	8000e56 <HAL_RCC_OscConfig+0x7e>
 8000e4c:	4b88      	ldr	r3, [pc, #544]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e54:	e005      	b.n	8000e62 <HAL_RCC_OscConfig+0x8a>
 8000e56:	4b86      	ldr	r3, [pc, #536]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d923      	bls.n	8000eae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fd90 	bl	8001990 <RCC_SetFlashLatencyFromMSIRange>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e3ce      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e7a:	4a7d      	ldr	r2, [pc, #500]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e7c:	4b7c      	ldr	r3, [pc, #496]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	497a      	ldr	r1, [pc, #488]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e88:	4b79      	ldr	r3, [pc, #484]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e98:	4975      	ldr	r1, [pc, #468]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e9a:	4b75      	ldr	r3, [pc, #468]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
 8000eac:	e025      	b.n	8000efa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eae:	4a70      	ldr	r2, [pc, #448]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000eb0:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	496d      	ldr	r1, [pc, #436]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000ebc:	4b6c      	ldr	r3, [pc, #432]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ecc:	4968      	ldr	r1, [pc, #416]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000ece:	4b68      	ldr	r3, [pc, #416]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	4313      	orrs	r3, r2
 8000ede:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d109      	bne.n	8000efa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fd50 	bl	8001990 <RCC_SetFlashLatencyFromMSIRange>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e38e      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000efa:	f000 fcbf 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8000efe:	4601      	mov	r1, r0
 8000f00:	4b5b      	ldr	r3, [pc, #364]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	4a5a      	ldr	r2, [pc, #360]	; (8001074 <HAL_RCC_OscConfig+0x29c>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	fa21 f303 	lsr.w	r3, r1, r3
 8000f16:	4a58      	ldr	r2, [pc, #352]	; (8001078 <HAL_RCC_OscConfig+0x2a0>)
 8000f18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f1a:	4b58      	ldr	r3, [pc, #352]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb14 	bl	800054c <HAL_InitTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d052      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	e372      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d032      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f3a:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f3c:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb51 	bl	80005ec <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fb4d 	bl	80005ec <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e35b      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f6c:	4a40      	ldr	r2, [pc, #256]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	493d      	ldr	r1, [pc, #244]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f8a:	4939      	ldr	r1, [pc, #228]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	604b      	str	r3, [r1, #4]
 8000f9e:	e01a      	b.n	8000fd6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fa0:	4a33      	ldr	r2, [pc, #204]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fb1e 	bl	80005ec <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fb1a 	bl	80005ec <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e328      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x1dc>
 8000fd2:	e000      	b.n	8000fd6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d073      	beq.n	80010ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d005      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x21c>
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d10e      	bne.n	800100c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d10b      	bne.n	800100c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d063      	beq.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d15f      	bne.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e305      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001014:	d106      	bne.n	8001024 <HAL_RCC_OscConfig+0x24c>
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e01d      	b.n	8001060 <HAL_RCC_OscConfig+0x288>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x270>
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0x288>
 8001048:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_RCC_OscConfig+0x298>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d01b      	beq.n	80010a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fac0 	bl	80005ec <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800106e:	e010      	b.n	8001092 <HAL_RCC_OscConfig+0x2ba>
 8001070:	40021000 	.word	0x40021000
 8001074:	08001bd8 	.word	0x08001bd8
 8001078:	20000000 	.word	0x20000000
 800107c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fab4 	bl	80005ec <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e2c2      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001092:	4baf      	ldr	r3, [pc, #700]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x2a8>
 800109e:	e014      	b.n	80010ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a0:	f7ff faa4 	bl	80005ec <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff faa0 	bl	80005ec <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e2ae      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ba:	4ba5      	ldr	r3, [pc, #660]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2d0>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d060      	beq.n	8001198 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_OscConfig+0x310>
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d119      	bne.n	8001116 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d116      	bne.n	8001116 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010e8:	4b99      	ldr	r3, [pc, #612]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_OscConfig+0x328>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e28b      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4993      	ldr	r1, [pc, #588]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001102:	4b93      	ldr	r3, [pc, #588]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	061b      	lsls	r3, r3, #24
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001114:	e040      	b.n	8001198 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d023      	beq.n	8001166 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111e:	4a8c      	ldr	r2, [pc, #560]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001120:	4b8b      	ldr	r3, [pc, #556]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112a:	f7ff fa5f 	bl	80005ec <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fa5b 	bl	80005ec <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e269      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001144:	4b82      	ldr	r3, [pc, #520]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	497f      	ldr	r1, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001152:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	061b      	lsls	r3, r3, #24
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
 8001164:	e018      	b.n	8001198 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4a7a      	ldr	r2, [pc, #488]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001168:	4b79      	ldr	r3, [pc, #484]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001172:	f7ff fa3b 	bl	80005ec <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117a:	f7ff fa37 	bl	80005ec <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e245      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800118c:	4b70      	ldr	r3, [pc, #448]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f0      	bne.n	800117a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d03c      	beq.n	800121e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d01c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ac:	4a68      	ldr	r2, [pc, #416]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80011ae:	4b68      	ldr	r3, [pc, #416]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80011b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011bc:	f7ff fa16 	bl	80005ec <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fa12 	bl	80005ec <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e220      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d6:	4b5e      	ldr	r3, [pc, #376]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80011d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0ef      	beq.n	80011c4 <HAL_RCC_OscConfig+0x3ec>
 80011e4:	e01b      	b.n	800121e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e6:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80011e8:	4b59      	ldr	r3, [pc, #356]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f6:	f7ff f9f9 	bl	80005ec <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff f9f5 	bl	80005ec <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e203      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001210:	4b4f      	ldr	r3, [pc, #316]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1ef      	bne.n	80011fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80a6 	beq.w	8001378 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001230:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10d      	bne.n	8001258 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	4a44      	ldr	r2, [pc, #272]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001246:	6593      	str	r3, [r2, #88]	; 0x58
 8001248:	4b41      	ldr	r3, [pc, #260]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001254:	2301      	movs	r3, #1
 8001256:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001258:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <HAL_RCC_OscConfig+0x57c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d118      	bne.n	8001296 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001264:	4a3b      	ldr	r2, [pc, #236]	; (8001354 <HAL_RCC_OscConfig+0x57c>)
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_RCC_OscConfig+0x57c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001270:	f7ff f9bc 	bl	80005ec <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001278:	f7ff f9b8 	bl	80005ec <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1c6      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <HAL_RCC_OscConfig+0x57c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d108      	bne.n	80012b0 <HAL_RCC_OscConfig+0x4d8>
 800129e:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ae:	e024      	b.n	80012fa <HAL_RCC_OscConfig+0x522>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d110      	bne.n	80012da <HAL_RCC_OscConfig+0x502>
 80012b8:	4a25      	ldr	r2, [pc, #148]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012c8:	4a21      	ldr	r2, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d8:	e00f      	b.n	80012fa <HAL_RCC_OscConfig+0x522>
 80012da:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f2:	f023 0304 	bic.w	r3, r3, #4
 80012f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d016      	beq.n	8001330 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001302:	f7ff f973 	bl	80005ec <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff f96f 	bl	80005ec <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f241 3288 	movw	r2, #5000	; 0x1388
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e17b      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_RCC_OscConfig+0x578>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0ed      	beq.n	800130a <HAL_RCC_OscConfig+0x532>
 800132e:	e01a      	b.n	8001366 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001330:	f7ff f95c 	bl	80005ec <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001336:	e00f      	b.n	8001358 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff f958 	bl	80005ec <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	; 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d906      	bls.n	8001358 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e164      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001358:	4ba8      	ldr	r3, [pc, #672]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1e8      	bne.n	8001338 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136c:	4aa3      	ldr	r2, [pc, #652]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800136e:	4ba3      	ldr	r3, [pc, #652]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001376:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d03c      	beq.n	80013fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	2b00      	cmp	r3, #0
 800138a:	d01c      	beq.n	80013c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800138c:	4a9b      	ldr	r2, [pc, #620]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800138e:	4b9b      	ldr	r3, [pc, #620]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff f926 	bl	80005ec <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013a4:	f7ff f922 	bl	80005ec <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e130      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013b6:	4b91      	ldr	r3, [pc, #580]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80013b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0ef      	beq.n	80013a4 <HAL_RCC_OscConfig+0x5cc>
 80013c4:	e01b      	b.n	80013fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013c6:	4a8d      	ldr	r2, [pc, #564]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80013c8:	4b8c      	ldr	r3, [pc, #560]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80013ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7ff f909 	bl	80005ec <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013de:	f7ff f905 	bl	80005ec <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e113      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013f0:	4b82      	ldr	r3, [pc, #520]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80013f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ef      	bne.n	80013de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8107 	beq.w	8001616 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	2b02      	cmp	r3, #2
 800140e:	f040 80cb 	bne.w	80015a8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001412:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f003 0203 	and.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	429a      	cmp	r2, r3
 8001424:	d12c      	bne.n	8001480 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	3b01      	subs	r3, #1
 8001432:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d123      	bne.n	8001480 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001444:	429a      	cmp	r2, r3
 8001446:	d11b      	bne.n	8001480 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001454:	429a      	cmp	r2, r3
 8001456:	d113      	bne.n	8001480 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	3b01      	subs	r3, #1
 8001466:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d109      	bne.n	8001480 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	3b01      	subs	r3, #1
 800147a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d06d      	beq.n	800155c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b0c      	cmp	r3, #12
 8001484:	d068      	beq.n	8001558 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001492:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0ba      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a2:	4a56      	ldr	r2, [pc, #344]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014ae:	f7ff f89d 	bl	80005ec <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff f899 	bl	80005ec <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0a7      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d4:	4849      	ldr	r0, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	4b49      	ldr	r3, [pc, #292]	; (8001600 <HAL_RCC_OscConfig+0x828>)
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014e6:	3a01      	subs	r2, #1
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f8:	0852      	lsrs	r2, r2, #1
 80014fa:	3a01      	subs	r2, #1
 80014fc:	0552      	lsls	r2, r2, #21
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	3a01      	subs	r2, #1
 8001508:	0652      	lsls	r2, r2, #25
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001510:	06d2      	lsls	r2, r2, #27
 8001512:	430a      	orrs	r2, r1
 8001514:	4313      	orrs	r3, r2
 8001516:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001518:	4a38      	ldr	r2, [pc, #224]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001522:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001524:	4a35      	ldr	r2, [pc, #212]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001530:	f7ff f85c 	bl	80005ec <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff f858 	bl	80005ec <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e066      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001556:	e05e      	b.n	8001616 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e05d      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d156      	bne.n	8001616 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001568:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001572:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001580:	f7ff f834 	bl	80005ec <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff f830 	bl	80005ec <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e03e      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x7b0>
 80015a6:	e036      	b.n	8001616 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d031      	beq.n	8001612 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d105      	bne.n	80015d2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f023 0303 	bic.w	r3, r3, #3
 80015d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_OscConfig+0x824>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff f803 	bl	80005ec <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e8:	e00c      	b.n	8001604 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7fe ffff 	bl	80005ec <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d905      	bls.n	8001604 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e00d      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
 80015fc:	40021000 	.word	0x40021000
 8001600:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_RCC_OscConfig+0x848>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ec      	bne.n	80015ea <HAL_RCC_OscConfig+0x812>
 8001610:	e001      	b.n	8001616 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e10f      	b.n	800185c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b89      	ldr	r3, [pc, #548]	; (8001864 <HAL_RCC_ClockConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 020f 	and.w	r2, r3, #15
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d210      	bcs.n	800166c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4986      	ldr	r1, [pc, #536]	; (8001864 <HAL_RCC_ClockConfig+0x240>)
 800164c:	4b85      	ldr	r3, [pc, #532]	; (8001864 <HAL_RCC_ClockConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 020f 	bic.w	r2, r3, #15
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b82      	ldr	r3, [pc, #520]	; (8001864 <HAL_RCC_ClockConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 020f 	and.w	r2, r3, #15
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0f7      	b.n	800185c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8089 	beq.w	800178c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d133      	bne.n	80016ea <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001682:	4b79      	ldr	r3, [pc, #484]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0e4      	b.n	800185c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001692:	f000 f9d7 	bl	8001a44 <RCC_GetSysClockFreqFromPLLSource>
 8001696:	4602      	mov	r2, r0
 8001698:	4b74      	ldr	r3, [pc, #464]	; (800186c <HAL_RCC_ClockConfig+0x248>)
 800169a:	429a      	cmp	r2, r3
 800169c:	d955      	bls.n	800174a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800169e:	4b72      	ldr	r3, [pc, #456]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10a      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016aa:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80016ac:	4b6e      	ldr	r3, [pc, #440]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e044      	b.n	800174a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03e      	beq.n	800174a <HAL_RCC_ClockConfig+0x126>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d13a      	bne.n	800174a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016d4:	4a64      	ldr	r2, [pc, #400]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80016d6:	4b64      	ldr	r3, [pc, #400]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e02f      	b.n	800174a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0ac      	b.n	800185c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800170a:	4b57      	ldr	r3, [pc, #348]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0a0      	b.n	800185c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e098      	b.n	800185c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800172a:	f000 f8a7 	bl	800187c <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b4e      	ldr	r3, [pc, #312]	; (800186c <HAL_RCC_ClockConfig+0x248>)
 8001732:	429a      	cmp	r2, r3
 8001734:	d909      	bls.n	800174a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001736:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800174a:	4947      	ldr	r1, [pc, #284]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800174c:	4b46      	ldr	r3, [pc, #280]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 0203 	bic.w	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800175c:	f7fe ff46 	bl	80005ec <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001762:	e00a      	b.n	800177a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001764:	f7fe ff42 	bl	80005ec <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e070      	b.n	800185c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 020c 	and.w	r2, r3, #12
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	429a      	cmp	r2, r3
 800178a:	d1eb      	bne.n	8001764 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d009      	beq.n	80017ac <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4933      	ldr	r1, [pc, #204]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
 80017aa:	e008      	b.n	80017be <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b80      	cmp	r3, #128	; 0x80
 80017b0:	d105      	bne.n	80017be <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80017b2:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017bc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_RCC_ClockConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 020f 	and.w	r2, r3, #15
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d910      	bls.n	80017ee <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017cc:	4925      	ldr	r1, [pc, #148]	; (8001864 <HAL_RCC_ClockConfig+0x240>)
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_RCC_ClockConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 020f 	bic.w	r2, r3, #15
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_RCC_ClockConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 020f 	and.w	r2, r3, #15
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e036      	b.n	800185c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fa:	491b      	ldr	r1, [pc, #108]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001818:	4913      	ldr	r1, [pc, #76]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800182c:	f000 f826 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8001830:	4601      	mov	r1, r0
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_RCC_ClockConfig+0x244>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <HAL_RCC_ClockConfig+0x24c>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	fa21 f303 	lsr.w	r3, r1, r3
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_RCC_ClockConfig+0x250>)
 800184a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_RCC_ClockConfig+0x254>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe7b 	bl	800054c <HAL_InitTick>
 8001856:	4603      	mov	r3, r0
 8001858:	73fb      	strb	r3, [r7, #15]

  return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40022000 	.word	0x40022000
 8001868:	40021000 	.word	0x40021000
 800186c:	04c4b400 	.word	0x04c4b400
 8001870:	08001bd8 	.word	0x08001bd8
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x34>
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d121      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d11e      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018b0:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e005      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018cc:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018d8:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <HAL_RCC_GetSysClockFreq+0x108>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10d      	bne.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d102      	bne.n	80018fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	e004      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_GetSysClockFreq+0x110>)
 8001902:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d133      	bne.n	8001972 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0xa4>
 800191a:	2b03      	cmp	r3, #3
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0xaa>
 800191e:	e005      	b.n	800192c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001922:	617b      	str	r3, [r7, #20]
      break;
 8001924:	e005      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_RCC_GetSysClockFreq+0x110>)
 8001928:	617b      	str	r3, [r7, #20]
      break;
 800192a:	e002      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	617b      	str	r3, [r7, #20]
      break;
 8001930:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	3301      	adds	r3, #1
 800193e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	fb02 f203 	mul.w	r2, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0e5b      	lsrs	r3, r3, #25
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	3301      	adds	r3, #1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001972:	69bb      	ldr	r3, [r7, #24]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3724      	adds	r7, #36	; 0x24
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	08001be8 	.word	0x08001be8
 8001988:	00f42400 	.word	0x00f42400
 800198c:	007a1200 	.word	0x007a1200

08001990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019a8:	f7ff f952 	bl	8000c50 <HAL_PWREx_GetVoltageRange>
 80019ac:	6178      	str	r0, [r7, #20]
 80019ae:	e014      	b.n	80019da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	; 0x58
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019c8:	f7ff f942 	bl	8000c50 <HAL_PWREx_GetVoltageRange>
 80019cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e0:	d10b      	bne.n	80019fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b80      	cmp	r3, #128	; 0x80
 80019e6:	d913      	bls.n	8001a10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2ba0      	cmp	r3, #160	; 0xa0
 80019ec:	d902      	bls.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019ee:	2302      	movs	r3, #2
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e00d      	b.n	8001a10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019f4:	2301      	movs	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	e00a      	b.n	8001a10 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b7f      	cmp	r3, #127	; 0x7f
 80019fe:	d902      	bls.n	8001a06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001a00:	2302      	movs	r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	e004      	b.n	8001a10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b70      	cmp	r3, #112	; 0x70
 8001a0a:	d101      	bne.n	8001a10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a10:	490b      	ldr	r1, [pc, #44]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 020f 	bic.w	r2, r3, #15
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 020f 	and.w	r2, r3, #15
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40022000 	.word	0x40022000

08001a44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d118      	bne.n	8001a8c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e005      	b.n	8001a82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a82:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d002      	beq.n	8001aa2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d003      	beq.n	8001aa8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8001aa0:	e005      	b.n	8001aae <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001aa4:	613b      	str	r3, [r7, #16]
    break;
 8001aa6:	e005      	b.n	8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001aaa:	613b      	str	r3, [r7, #16]
    break;
 8001aac:	e002      	b.n	8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	613b      	str	r3, [r7, #16]
    break;
 8001ab2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	fb02 f203 	mul.w	r2, r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	0e5b      	lsrs	r3, r3, #25
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001af4:	683b      	ldr	r3, [r7, #0]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08001be8 	.word	0x08001be8
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	007a1200 	.word	0x007a1200

08001b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b18:	f7fe fcce 	bl	80004b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b1e:	e003      	b.n	8001b28 <LoopCopyDataInit>

08001b20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b26:	3104      	adds	r1, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b28:	480a      	ldr	r0, [pc, #40]	; (8001b54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b30:	d3f6      	bcc.n	8001b20 <CopyDataInit>
	ldr	r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b34:	e002      	b.n	8001b3c <LoopFillZerobss>

08001b36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b38:	f842 3b04 	str.w	r3, [r2], #4

08001b3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <LoopForever+0x16>)
	cmp	r2, r3
 8001b3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b40:	d3f9      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b42:	f000 f811 	bl	8001b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b46:	f7fe fb59 	bl	80001fc <main>

08001b4a <LoopForever>:

LoopForever:
    b LoopForever
 8001b4a:	e7fe      	b.n	8001b4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b4c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001b50:	08001c20 	.word	0x08001c20
	ldr	r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b58:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001b5c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001b60:	20000030 	.word	0x20000030

08001b64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC1_IRQHandler>
	...

08001b68 <__libc_init_array>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	4e0d      	ldr	r6, [pc, #52]	; (8001ba0 <__libc_init_array+0x38>)
 8001b6c:	4c0d      	ldr	r4, [pc, #52]	; (8001ba4 <__libc_init_array+0x3c>)
 8001b6e:	1ba4      	subs	r4, r4, r6
 8001b70:	10a4      	asrs	r4, r4, #2
 8001b72:	2500      	movs	r5, #0
 8001b74:	42a5      	cmp	r5, r4
 8001b76:	d109      	bne.n	8001b8c <__libc_init_array+0x24>
 8001b78:	4e0b      	ldr	r6, [pc, #44]	; (8001ba8 <__libc_init_array+0x40>)
 8001b7a:	4c0c      	ldr	r4, [pc, #48]	; (8001bac <__libc_init_array+0x44>)
 8001b7c:	f000 f820 	bl	8001bc0 <_init>
 8001b80:	1ba4      	subs	r4, r4, r6
 8001b82:	10a4      	asrs	r4, r4, #2
 8001b84:	2500      	movs	r5, #0
 8001b86:	42a5      	cmp	r5, r4
 8001b88:	d105      	bne.n	8001b96 <__libc_init_array+0x2e>
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
 8001b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b90:	4798      	blx	r3
 8001b92:	3501      	adds	r5, #1
 8001b94:	e7ee      	b.n	8001b74 <__libc_init_array+0xc>
 8001b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b9a:	4798      	blx	r3
 8001b9c:	3501      	adds	r5, #1
 8001b9e:	e7f2      	b.n	8001b86 <__libc_init_array+0x1e>
 8001ba0:	08001c18 	.word	0x08001c18
 8001ba4:	08001c18 	.word	0x08001c18
 8001ba8:	08001c18 	.word	0x08001c18
 8001bac:	08001c1c 	.word	0x08001c1c

08001bb0 <memset>:
 8001bb0:	4402      	add	r2, r0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d100      	bne.n	8001bba <memset+0xa>
 8001bb8:	4770      	bx	lr
 8001bba:	f803 1b01 	strb.w	r1, [r3], #1
 8001bbe:	e7f9      	b.n	8001bb4 <memset+0x4>

08001bc0 <_init>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	bf00      	nop
 8001bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc6:	bc08      	pop	{r3}
 8001bc8:	469e      	mov	lr, r3
 8001bca:	4770      	bx	lr

08001bcc <_fini>:
 8001bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bce:	bf00      	nop
 8001bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd2:	bc08      	pop	{r3}
 8001bd4:	469e      	mov	lr, r3
 8001bd6:	4770      	bx	lr
